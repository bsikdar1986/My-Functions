{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "chief-journalist",
      "metadata": {
        "id": "chief-journalist"
      },
      "source": [
        "# Advanced Certification Program in Computational Data Science\n",
        "## A program by IISc and TalentSprint\n",
        "### Mini-Project: Linear Regression with Regularization"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "arabic-shaft",
      "metadata": {
        "id": "arabic-shaft"
      },
      "source": [
        "## Problem Statement"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "prospective-thread",
      "metadata": {
        "id": "prospective-thread"
      },
      "source": [
        "Predict the bike-sharing counts per hour based on the features including weather, day, time, humidity, wind speed, season e.t.c."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "organic-christmas",
      "metadata": {
        "id": "organic-christmas"
      },
      "source": [
        "## Learning Objectives"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "phantom-begin",
      "metadata": {
        "id": "phantom-begin"
      },
      "source": [
        "At the end of the mini-project, you will be able to :\n",
        "\n",
        "* perform data exploration and visualization\n",
        "* implement linear regression using sklearn and optimization\n",
        "* apply regularization on regression using Lasso, Ridge and Elasticnet techniques\n",
        "* calculate and compare the MSE value of each regression technique\n",
        "* analyze the features that are best contributing to the target"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "received-quilt",
      "metadata": {
        "id": "received-quilt"
      },
      "source": [
        "### Dataset"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "sporting-replication",
      "metadata": {
        "id": "sporting-replication"
      },
      "source": [
        "The dataset chosen for this mini-project is [Bike Sharing Dataset](https://archive.ics.uci.edu/ml/datasets/bike+sharing+dataset).  This dataset contains the hourly and daily count of rental bikes between the years 2011 and 2012 in the capital bike share system with the corresponding weather and seasonal information. This dataset consists of 17389 instances of 16 features.\n",
        "\n",
        "Bike sharing systems are a new generation of traditional bike rentals where the whole process from membership, rental and return has become automatic. Through these systems, the user can easily rent a bike from a particular position and return to another position. Currently, there are about over 500 bike-sharing programs around the world which is composed of over 500 thousand bicycles. Today, there exists great interest in these systems due to their important role in traffic, environmental and health issues.\n",
        "\n",
        "Apart from interesting real world applications of bike sharing systems, the characteristics of data being generated by these systems make them attractive for the research. As opposed to other transport services such as bus or subway, the duration of travel, departure and arrival position are explicitly recorded in these systems. This feature turns bike sharing system into a virtual sensor network that can be used for sensing mobility in the city. Hence, it is expected that the most important events in the city could be detected via monitoring these data."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5ISKMyTABbfp",
      "metadata": {
        "id": "5ISKMyTABbfp"
      },
      "source": [
        "<img src=\"https://s26551.pcdn.co/wp-content/uploads/2012/02/resize-va-sq-bikeshare.jpg\" alt=\"drawing\" width=\"400\"/>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "binary-evening",
      "metadata": {
        "id": "binary-evening"
      },
      "source": [
        "### Data Fields\n",
        "\n",
        "* dteday - hourly date\n",
        "* season - 1:winter, 2:spring, 3:summer, 4:fall\n",
        "* hr - hour\n",
        "* holiday - whether the day is considered a holiday\n",
        "* workingday - whether the day is neither a weekend nor holiday\n",
        "* weathersit -<br>\n",
        "    1 - Clear, Few clouds, Partly cloudy, Partly cloudy <br>\n",
        "    2 - Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist<br>\n",
        "    3 - Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds<br>\n",
        "    4 - Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog<br>   \n",
        "* temp - temperature in Celsius\n",
        "* atemp - \"feels like\" temperature in Celsius\n",
        "* humidity - relative humidity\n",
        "* windspeed - wind speed\n",
        "* casual - number of non-registered user rentals initiated\n",
        "* registered - number of registered user rentals initiated\n",
        "* cnt - number of total rentals"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "perfect-fields",
      "metadata": {
        "id": "perfect-fields"
      },
      "source": [
        "## Information"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "quick-gasoline",
      "metadata": {
        "id": "quick-gasoline"
      },
      "source": [
        "**Regularization:** It is a form of regression that shrinks the coefficient estimates towards zero. In other words, this technique discourages learning a more complex or flexible model, to avoid the risk of overfitting. A simple relation for linear regression looks like this.\n",
        "\n",
        "$Y ≈ β_0 + β_1 X_1 + β_2 X_2 + …+ β_p X_p$\n",
        "\n",
        " Here $Y$ represents the learned relation and $β$ represents the coefficient estimates for different variables or predictors(X).\n",
        "\n",
        " If there is noise in the training data, then the estimated coefficients won’t generalize well to the future data. This is where regularization comes in and shrinks or regularizes these learned estimates towards zero.\n",
        "\n",
        "Below are the Regularization techniques:\n",
        "\n",
        " * Ridge Regression\n",
        " * Lasso Regression\n",
        " * Elasticnet Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "declared-battle",
      "metadata": {
        "id": "declared-battle"
      },
      "source": [
        "## Grading = 10 Points"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "virtual-ownership",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "virtual-ownership",
        "outputId": "94175791-a9c1-4187-8d3e-8f7c95075121"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  Bike_Sharing_Dataset.zip\n",
            "  inflating: Readme.txt              \n",
            "  inflating: day.csv                 \n",
            "  inflating: hour.csv                \n"
          ]
        }
      ],
      "source": [
        "#@title Download the dataset\n",
        "!wget -qq https://cdn.iisc.talentsprint.com/CDS/MiniProjects/Bike_Sharing_Dataset.zip\n",
        "!unzip Bike_Sharing_Dataset.zip"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "cross-survivor",
      "metadata": {
        "id": "cross-survivor"
      },
      "source": [
        "#### Importing Necessary Packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "ethical-essence",
      "metadata": {
        "id": "ethical-essence"
      },
      "outputs": [],
      "source": [
        "# Loading the Required Packages\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn import linear_model\n",
        "from sklearn.metrics import mean_squared_error\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.metrics import r2_score"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "through-scotland",
      "metadata": {
        "id": "through-scotland"
      },
      "source": [
        "### Data Loading"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "id": "comic-consolidation",
      "metadata": {
        "id": "comic-consolidation"
      },
      "outputs": [],
      "source": [
        "# Read the hour.csv file\n",
        "# YOUR CODE HERE\n",
        "df_day = pd.read_csv(\"day.csv\")\n",
        "df_hr = pd.read_csv(\"hour.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ordered-overall",
      "metadata": {
        "id": "ordered-overall"
      },
      "source": [
        "print the first five rows of dataset"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "exterior-committee",
      "metadata": {
        "id": "exterior-committee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "af6924bd-beaf-4ffd-9ac6-9ef124379b44"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant      dteday  season  yr  mnth  holiday  weekday  workingday  \\\n",
              "0        1  2011-01-01       1   0     1        0        6           0   \n",
              "1        2  2011-01-02       1   0     1        0        0           0   \n",
              "2        3  2011-01-03       1   0     1        0        1           1   \n",
              "3        4  2011-01-04       1   0     1        0        2           1   \n",
              "4        5  2011-01-05       1   0     1        0        3           1   \n",
              "\n",
              "   weathersit      temp     atemp       hum  windspeed  casual  registered  \\\n",
              "0           2  0.344167  0.363625  0.805833   0.160446     331         654   \n",
              "1           2  0.363478  0.353739  0.696087   0.248539     131         670   \n",
              "2           1  0.196364  0.189405  0.437273   0.248309     120        1229   \n",
              "3           1  0.200000  0.212122  0.590435   0.160296     108        1454   \n",
              "4           1  0.226957  0.229270  0.436957   0.186900      82        1518   \n",
              "\n",
              "    cnt  \n",
              "0   985  \n",
              "1   801  \n",
              "2  1349  \n",
              "3  1562  \n",
              "4  1600  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2029388a-9882-4887-b3c8-12774264c5fa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>dteday</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.344167</td>\n",
              "      <td>0.363625</td>\n",
              "      <td>0.805833</td>\n",
              "      <td>0.160446</td>\n",
              "      <td>331</td>\n",
              "      <td>654</td>\n",
              "      <td>985</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-02</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0.363478</td>\n",
              "      <td>0.353739</td>\n",
              "      <td>0.696087</td>\n",
              "      <td>0.248539</td>\n",
              "      <td>131</td>\n",
              "      <td>670</td>\n",
              "      <td>801</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-03</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.196364</td>\n",
              "      <td>0.189405</td>\n",
              "      <td>0.437273</td>\n",
              "      <td>0.248309</td>\n",
              "      <td>120</td>\n",
              "      <td>1229</td>\n",
              "      <td>1349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-04</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.200000</td>\n",
              "      <td>0.212122</td>\n",
              "      <td>0.590435</td>\n",
              "      <td>0.160296</td>\n",
              "      <td>108</td>\n",
              "      <td>1454</td>\n",
              "      <td>1562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-05</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0.226957</td>\n",
              "      <td>0.229270</td>\n",
              "      <td>0.436957</td>\n",
              "      <td>0.186900</td>\n",
              "      <td>82</td>\n",
              "      <td>1518</td>\n",
              "      <td>1600</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2029388a-9882-4887-b3c8-12774264c5fa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2029388a-9882-4887-b3c8-12774264c5fa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2029388a-9882-4887-b3c8-12774264c5fa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-53402138-ab65-4e98-b2c6-1f1b30bdb893\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-53402138-ab65-4e98-b2c6-1f1b30bdb893')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-53402138-ab65-4e98-b2c6-1f1b30bdb893 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_day",
              "summary": "{\n  \"name\": \"df_day\",\n  \"rows\": 731,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 211,\n        \"min\": 1,\n        \"max\": 731,\n        \"num_unique_values\": 731,\n        \"samples\": [\n          704,\n          34,\n          301\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dteday\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04\",\n          \"2011-02-03\",\n          \"2011-10-28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 3,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18305099611148878,\n        \"min\": 0.0591304,\n        \"max\": 0.861667,\n        \"num_unique_values\": 499,\n        \"samples\": [\n          0.544167,\n          0.430435\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1629611783863113,\n        \"min\": 0.0790696,\n        \"max\": 0.840896,\n        \"num_unique_values\": 690,\n        \"samples\": [\n          0.463375,\n          0.599754\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14242909513835394,\n        \"min\": 0.0,\n        \"max\": 0.9725,\n        \"num_unique_values\": 595,\n        \"samples\": [\n          0.707083,\n          0.718333\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07749787068166941,\n        \"min\": 0.0223917,\n        \"max\": 0.507463,\n        \"num_unique_values\": 650,\n        \"samples\": [\n          0.100742,\n          0.139308\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 686,\n        \"min\": 2,\n        \"max\": 3410,\n        \"num_unique_values\": 606,\n        \"samples\": [\n          709,\n          449\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1560,\n        \"min\": 20,\n        \"max\": 6946,\n        \"num_unique_values\": 679,\n        \"samples\": [\n          4531,\n          2553\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1937,\n        \"min\": 22,\n        \"max\": 8714,\n        \"num_unique_values\": 696,\n        \"samples\": [\n          5170,\n          1607\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_day.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "OEIPpMrNcXBu",
      "metadata": {
        "id": "OEIPpMrNcXBu",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "outputId": "0eb507ea-0dc2-4c30-9054-0ebe76b262d0"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant      dteday  season  yr  mnth  hr  holiday  weekday  workingday  \\\n",
              "0        1  2011-01-01       1   0     1   0        0        6           0   \n",
              "1        2  2011-01-01       1   0     1   1        0        6           0   \n",
              "2        3  2011-01-01       1   0     1   2        0        6           0   \n",
              "3        4  2011-01-01       1   0     1   3        0        6           0   \n",
              "4        5  2011-01-01       1   0     1   4        0        6           0   \n",
              "\n",
              "   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n",
              "0           1  0.24  0.2879  0.81        0.0       3          13   16  \n",
              "1           1  0.22  0.2727  0.80        0.0       8          32   40  \n",
              "2           1  0.22  0.2727  0.80        0.0       5          27   32  \n",
              "3           1  0.24  0.2879  0.75        0.0       3          10   13  \n",
              "4           1  0.24  0.2879  0.75        0.0       0           1    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17b291af-00d8-4570-8303-8c2a0b28d3f3\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>dteday</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>hr</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17b291af-00d8-4570-8303-8c2a0b28d3f3')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17b291af-00d8-4570-8303-8c2a0b28d3f3 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17b291af-00d8-4570-8303-8c2a0b28d3f3');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cc24a534-26fb-4107-b5d0-8cf3e20b8335\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cc24a534-26fb-4107-b5d0-8cf3e20b8335')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cc24a534-26fb-4107-b5d0-8cf3e20b8335 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_hr",
              "summary": "{\n  \"name\": \"df_hr\",\n  \"rows\": 17379,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5017,\n        \"min\": 1,\n        \"max\": 17379,\n        \"num_unique_values\": 17379,\n        \"samples\": [\n          12831,\n          8689,\n          7092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dteday\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04\",\n          \"2011-02-03\",\n          \"2011-10-28\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          8,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1925561212497219,\n        \"min\": 0.02,\n        \"max\": 1.0,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.16,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17185021563535943,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.7879,\n          0.9242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19292983406291508,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          0.29,\n          0.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12234022857279049,\n        \"min\": 0.0,\n        \"max\": 0.8507,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.8507,\n          0.4925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          201,\n          171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 776,\n        \"samples\": [\n          342,\n          744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 869,\n        \"samples\": [\n          594,\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df_hr.head(5)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# df_hr['dteday'] = pd.to_datetime(df_hr['dteday'], errors='coerce')"
      ],
      "metadata": {
        "id": "P0rqtvBqkxS8"
      },
      "id": "P0rqtvBqkxS8",
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "id": "e67gbVvLIsoS",
      "metadata": {
        "id": "e67gbVvLIsoS"
      },
      "source": [
        "print the datatypes of the columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "id": "sharp-shelter",
      "metadata": {
        "id": "sharp-shelter",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4a208d3e-57a9-42db-b176-cccc46df0fe4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "instant         int64\n",
              "dteday         object\n",
              "season          int64\n",
              "yr              int64\n",
              "mnth            int64\n",
              "hr              int64\n",
              "holiday         int64\n",
              "weekday         int64\n",
              "workingday      int64\n",
              "weathersit      int64\n",
              "temp          float64\n",
              "atemp         float64\n",
              "hum           float64\n",
              "windspeed     float64\n",
              "casual          int64\n",
              "registered      int64\n",
              "cnt             int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_hr.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "opponent-block",
      "metadata": {
        "id": "opponent-block"
      },
      "source": [
        "### Task flow with respect to feature processing and model training\n",
        "\n",
        "* Explore and analyze the data\n",
        "\n",
        "* Identify continuous features and categorical features\n",
        "\n",
        "* Apply scaling on continuous features and one-hot encoding on categorical features\n",
        "\n",
        "* Separate the features, targets and split the data into train and test\n",
        "\n",
        "* Find the coefficients of the features using normal equation and find the cost (error)\n",
        "\n",
        "* Apply batch gradient descent technique and find the best coefficients\n",
        "\n",
        "* Apply SGD Regressor using sklearn\n",
        "\n",
        "* Apply linear regression using sklearn\n",
        "\n",
        "* Apply Lasso, Ridge, Elasticnet Regression"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "magnetic-penny",
      "metadata": {
        "id": "magnetic-penny"
      },
      "source": [
        "### EDA &  Visualization ( 2 points)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "constitutional-techno",
      "metadata": {
        "id": "constitutional-techno"
      },
      "source": [
        "#### Visualize the hour (hr) column with an appropriate plot and find the busy hours of bike sharing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "id": "uniform-comfort",
      "metadata": {
        "id": "uniform-comfort",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 586
        },
        "outputId": "0ea7cd43-b65f-4ec4-a91b-216ddae94ec3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Max Rental is during the Hr: 17\n"
          ]
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "plt.figure(figsize=(8, 6))\n",
        "df_hr.groupby('hr').sum()['cnt'].plot(kind='bar')\n",
        "plt.title('Cnt Values by Hr')\n",
        "plt.xlabel('Hours')\n",
        "plt.ylabel('Counts')\n",
        "plt.show()\n",
        "sum_rentals = df_hr.groupby('hr').sum()['cnt']\n",
        "print(f'Max Rental is during the Hr: {sum_rentals.idxmax()}')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "flexible-export",
      "metadata": {
        "id": "flexible-export"
      },
      "source": [
        "#### Visualize the distribution of count, casual and registered variables"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# df_hr['dteday'] = pd.to_datetime(df_hr['dteday'], errors='coerce')"
      ],
      "metadata": {
        "id": "r_1MJXF99E8p"
      },
      "id": "r_1MJXF99E8p",
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.groupby('hr').sum()[['casual', 'registered']].plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 471
        },
        "id": "H1Mt4PqOdDSf",
        "outputId": "6974180c-6046-44fe-a496-abe8adaf4058"
      },
      "id": "H1Mt4PqOdDSf",
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='hr'>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "manufactured-introduction",
      "metadata": {
        "id": "manufactured-introduction"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE for distribuiton of count variable\n",
        "# Calculate total counts\n",
        "# df_hr_cas_reg = df_hr[['casual', 'registered', 'hr']]\n",
        "# df_hr_cas_reg['total'] = df_hr_cas_reg.sum(axis=1)\n",
        "# df_hr_cas_reg.head()\n",
        "# df_hr_cas_reg.hist(figsize=(12, 8))\n",
        "# plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "id": "powerful-involvement",
      "metadata": {
        "id": "powerful-involvement",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "outputId": "bcab74e8-54ab-44a2-fa7d-b1e2cea41041"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "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i11jsbGxtX4w8ezZsyotLSXH/3Xttdeqffv2+vzzzyU13cyysrK0fv16ffDBB+rQoYO9/XK+F2NjY897HdaMNVYXyux8+vfvL0kB11lTyiw8PFzXX3+9+vTpo5kzZ6pXr16aP38+19dFXCiz82nq1xelto6Fh4erT58+2rx5s72turpamzdvDngmBv/n1KlT+uKLLxQXF6c+ffooLCwsIL9Dhw7p6NGj5Pe/EhMTFRsbG5CRz+dTYWGhnVFSUpLKyspUVFRkz9myZYuqq6vt/wg2df/zP/+jb7/9VnFxcZKaXmaWZSkrK0tr167Vli1blJiYGDB+Od+LSUlJ2rdvX8D/DHg8HrndbvufSxuTS2V2PsXFxZIUcJ01pczOVV1drYqKCq4vB2oyO58mf3019E+qNQWvv/665XK5rBUrVliffvqpNX78eCsyMjLgpxGbsscff9zaunWrdeTIEevjjz+2kpOTrfbt21vHjx+3LMuyHnroIatjx47Wli1brN27d1tJSUlWUlJSA6+6fp08edLas2ePtWfPHkuSNXfuXGvPnj3WV199ZVmWZT3//PNWZGSk9dZbb1l79+61hg8fbiUmJlrff/+9vY8hQ4ZYN910k1VYWGh99NFH1g033GA98MADDXVKde5imZ08edL6/e9/bxUUFFhHjhyx3n//fevmm2+2brjhBuvMmTP2PppSZg8//LDVpk0ba+vWrdY333xj/ykvL7fnXOp78ezZs1b37t2tlJQUq7i42Nq0aZN19dVXW5MnT26IU6pzl8rs888/t6ZPn27t3r3bOnLkiPXWW29Z1157rTVgwAB7H00ps0mTJlnbtm2zjhw5Yu3du9eaNGmSFRISYuXl5VmWxfV1PhfLjOurNkptPVm4cKHVsWNHKzw83OrXr5+1Y8eOhl7SFeOXv/ylFRcXZ4WHh1s/+clPrF/+8pfW559/bo9///331iOPPGK1bdvWatmypTVy5Ejrm2++acAV178PPvjAklTrT3p6umVZf/tYr6efftqKiYmxXC6XNWjQIOvQoUMB+/j222+tBx54wLrqqqsst9tt/eY3v7FOnjzZAGdTPy6WWXl5uZWSkmJdffXVVlhYmNWpUydr3Lhxtf5Hsylldr6sJFkvv/yyPedyvhe//PJLa+jQoVaLFi2s9u3bW48//rjl9/vr+Wzqx6UyO3r0qDVgwAArKirKcrlc1vXXX29NnDjROnHiRMB+mkpmDz74oNWpUycrPDzcuvrqq61BgwbZhdayuL7O52KZcX3VFmJZllV/94UBAACA4OOZWgAAABiPUgsAAADjUWoBAABgPEotAAAAjEepBQAAgPEotQAAADAepRYAAADGo9QCAADAeJRaAAAAGI9SCwAAAONRagEAAGC8/w9sr1KlO0vnvwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE for distribuiton of casual variable\n",
        "df_hr['casual'].hist(figsize=(8, 6))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "id": "inside-consideration",
      "metadata": {
        "id": "inside-consideration",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 522
        },
        "outputId": "dde30bc9-8f26-44f5-c721-40a09cda7ee8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE for distribuiton of registered variable\n",
        "df_hr['registered'].hist(figsize=(8, 6))\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "twelve-burton",
      "metadata": {
        "id": "twelve-burton"
      },
      "source": [
        "#### Describe the relation of weekday, holiday and working day"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.head(5)"
      ],
      "metadata": {
        "id": "iZ1-A-qXevpu"
      },
      "id": "iZ1-A-qXevpu",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr['yr'].unique()"
      ],
      "metadata": {
        "id": "6PVKl8Xiijq6"
      },
      "id": "6PVKl8Xiijq6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "id": "afraid-proof",
      "metadata": {
        "id": "afraid-proof",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "outputId": "f3db3678-2b6c-44bf-c915-f8c53983eac6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='weekday'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_hr.groupby('weekday')['cnt'].mean().plot(kind='bar')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.groupby('holiday')['cnt'].mean().plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 462
        },
        "id": "-9AB16ISkYQZ",
        "outputId": "2783098a-1482-497b-f545-6eaa19446d37"
      },
      "id": "-9AB16ISkYQZ",
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='holiday'>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.groupby('workingday')['cnt'].mean().plot(kind='bar')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 463
        },
        "id": "2dNebLITkdrV",
        "outputId": "18ce7f03-04dc-43bf-a14e-6a88cba57a63"
      },
      "id": "2dNebLITkdrV",
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='workingday'>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "thrown-allowance",
      "metadata": {
        "id": "thrown-allowance"
      },
      "source": [
        "#### Visualize the month wise count of both casual and registered for the year 2011 and 2012 separately.\n",
        "\n",
        "Hint: Stacked barchart"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr['dteday'] = pd.to_datetime(df_hr['dteday'], errors='coerce')"
      ],
      "metadata": {
        "id": "fv8RmkoE9jxK"
      },
      "id": "fv8RmkoE9jxK",
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "id": "collective-spanking",
      "metadata": {
        "id": "collective-spanking",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "outputId": "78c9d77e-e262-42d2-ec05-ee9884a9a8ce"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-23-d79edafbc914>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_hr_2011['month'] = df_hr_2011['dteday'].dt.month\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='month'>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# stacked bar chart for year 2011\n",
        "# YOUR CODE HERE\n",
        "df_hr_2011 = df_hr[df_hr['dteday'].dt.year == 2011]\n",
        "df_hr_2011['month'] = df_hr_2011['dteday'].dt.month\n",
        "df_hr_2011.head(5)\n",
        "monthly_sum = df_hr_2011.groupby('month')[['casual', 'registered']].sum()\n",
        "monthly_sum.plot(kind='bar', stacked=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "id": "joined-court",
      "metadata": {
        "id": "joined-court",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "outputId": "78ddc8cd-4457-4be4-da50-d45838589d6c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-d54910b23e24>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_hr_2012['month'] = df_hr_2012['dteday'].dt.month\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='month'>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# stacked bar chart for year 2012\n",
        "# YOUR CODE HERE\n",
        "df_hr_2012 = df_hr[df_hr['dteday'].dt.year == 2012]\n",
        "df_hr_2012['month'] = df_hr_2012['dteday'].dt.month\n",
        "df_hr_2012.head(5)\n",
        "monthly_sum_2012 = df_hr_2012.groupby('month')[['casual', 'registered']].sum()\n",
        "monthly_sum_2012.plot(kind='bar', stacked=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fifty-driver",
      "metadata": {
        "id": "fifty-driver"
      },
      "source": [
        "#### Analyze the correlation between features with heatmap"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "id": "instant-coalition",
      "metadata": {
        "id": "instant-coalition",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 903
        },
        "outputId": "6839a4c9-6406-4d45-bd9f-27d3f0bc2215"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_hr_reduced = df_hr.drop(['dteday', 'instant', 'casual', 'registered'], axis=1)\n",
        "# auto = df_bike_rental.apply(pd.to_numeric, errors='coerce')\n",
        "plt.figure(figsize=(10, 10))\n",
        "sns.heatmap(df_hr_reduced.corr(), annot=True, linewidth=0.5, center=0, cmap=\"crest\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "pursuant-diary",
      "metadata": {
        "id": "pursuant-diary"
      },
      "source": [
        "#### Visualize the box plot of casual and registered variables to check the outliers"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "id": "stainless-robert",
      "metadata": {
        "id": "stainless-robert",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 600
        },
        "outputId": "592f4a84-4302-4eeb-f2cf-057a9d9138ee"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mean for Casual: 35.67621842453536\n",
            "Mean for Registered: 153.78686920996606\n"
          ]
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_hr_melt = df_hr.melt(id_vars=['instant'], value_vars=['casual', 'registered'], var_name='User Type', value_name='Rentals')\n",
        "# Create the box plot\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.boxplot(x='User Type', y='Rentals', data=df_hr_melt)\n",
        "\n",
        "# Add titles and labels\n",
        "plt.title('Box Plot of Bike Rentals: Casual vs Registered Users')\n",
        "plt.xlabel('User Type')\n",
        "plt.ylabel('Number of Rentals')\n",
        "\n",
        "# Show the plot\n",
        "plt.show()\n",
        "print(f'Mean for Casual: {df_hr[\"casual\"].mean()}')\n",
        "print(f'Mean for Registered: {df_hr[\"registered\"].mean()}')"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "comparative-heritage",
      "metadata": {
        "id": "comparative-heritage"
      },
      "source": [
        "### Pre-processing and Data Engineering (1 point)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "massive-scotland",
      "metadata": {
        "id": "massive-scotland"
      },
      "source": [
        "#### Drop unwanted columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "appreciated-lawyer",
      "metadata": {
        "id": "appreciated-lawyer"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE\n",
        "# drop cols based on low correlation to the cnt col\n",
        "df_hr_reduced = df_hr.drop(['instant', 'dteday'], axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "nASeXE_7JC0L",
      "metadata": {
        "id": "nASeXE_7JC0L"
      },
      "source": [
        "#### Identify categorical and continuous variables\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr['weathersit'].nunique()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "98WLVqgP-EoH",
        "outputId": "04983762-7423-4ae4-a43d-911c31a0f5f9"
      },
      "id": "98WLVqgP-EoH",
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "id": "available-jersey",
      "metadata": {
        "id": "available-jersey",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b0db4f55-aa89-434b-f47b-9e30a254217f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "instant                int64\n",
              "dteday        datetime64[ns]\n",
              "season                 int64\n",
              "yr                     int64\n",
              "mnth                   int64\n",
              "hr                     int64\n",
              "holiday                int64\n",
              "weekday                int64\n",
              "workingday             int64\n",
              "weathersit             int64\n",
              "temp                 float64\n",
              "atemp                float64\n",
              "hum                  float64\n",
              "windspeed            float64\n",
              "casual                 int64\n",
              "registered             int64\n",
              "cnt                    int64\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "df_hr.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Categorical Variables** - season, yr, mnth, hr, holiday, weekday, workingday, weathersit <br>\n",
        "**Continuous Variables** - temp, atemp, hum, windspeed, casual, registered, cnt"
      ],
      "metadata": {
        "id": "s-nPXv9890ua"
      },
      "id": "s-nPXv9890ua"
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "k-3UcOe35wzG",
        "outputId": "bd5bfbb7-fe73-47c8-f279-c0d5b4505367"
      },
      "id": "k-3UcOe35wzG",
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   instant     dteday  season  yr  mnth  hr  holiday  weekday  workingday  \\\n",
              "0        1 2011-01-01       1   0     1   0        0        6           0   \n",
              "1        2 2011-01-01       1   0     1   1        0        6           0   \n",
              "2        3 2011-01-01       1   0     1   2        0        6           0   \n",
              "3        4 2011-01-01       1   0     1   3        0        6           0   \n",
              "4        5 2011-01-01       1   0     1   4        0        6           0   \n",
              "\n",
              "   weathersit  temp   atemp   hum  windspeed  casual  registered  cnt  \n",
              "0           1  0.24  0.2879  0.81        0.0       3          13   16  \n",
              "1           1  0.22  0.2727  0.80        0.0       8          32   40  \n",
              "2           1  0.22  0.2727  0.80        0.0       5          27   32  \n",
              "3           1  0.24  0.2879  0.75        0.0       3          10   13  \n",
              "4           1  0.24  0.2879  0.75        0.0       0           1    1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-95e1ffdc-260d-4945-ba19-43a8c7f8f5df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>instant</th>\n",
              "      <th>dteday</th>\n",
              "      <th>season</th>\n",
              "      <th>yr</th>\n",
              "      <th>mnth</th>\n",
              "      <th>hr</th>\n",
              "      <th>holiday</th>\n",
              "      <th>weekday</th>\n",
              "      <th>workingday</th>\n",
              "      <th>weathersit</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>casual</th>\n",
              "      <th>registered</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>13</td>\n",
              "      <td>16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>8</td>\n",
              "      <td>32</td>\n",
              "      <td>40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.22</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5</td>\n",
              "      <td>27</td>\n",
              "      <td>32</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>2011-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0.24</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-95e1ffdc-260d-4945-ba19-43a8c7f8f5df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-95e1ffdc-260d-4945-ba19-43a8c7f8f5df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-95e1ffdc-260d-4945-ba19-43a8c7f8f5df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e89bd00d-856d-4dcf-8de2-13b2031a3b0d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e89bd00d-856d-4dcf-8de2-13b2031a3b0d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e89bd00d-856d-4dcf-8de2-13b2031a3b0d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_hr",
              "summary": "{\n  \"name\": \"df_hr\",\n  \"rows\": 17379,\n  \"fields\": [\n    {\n      \"column\": \"instant\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5017,\n        \"min\": 1,\n        \"max\": 17379,\n        \"num_unique_values\": 17379,\n        \"samples\": [\n          12831,\n          8689,\n          7092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"dteday\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2011-01-01 00:00:00\",\n        \"max\": \"2012-12-31 00:00:00\",\n        \"num_unique_values\": 731,\n        \"samples\": [\n          \"2012-12-04 00:00:00\",\n          \"2011-02-03 00:00:00\",\n          \"2011-10-28 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"yr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mnth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          11,\n          10\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hr\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 24,\n        \"samples\": [\n          8,\n          16\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"holiday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weekday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 6,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          6,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"workingday\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weathersit\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"temp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1925561212497219,\n        \"min\": 0.02,\n        \"max\": 1.0,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          0.16,\n          0.82\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"atemp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.17185021563535943,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.7879,\n          0.9242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"hum\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.19292983406291508,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 89,\n        \"samples\": [\n          0.29,\n          0.61\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"windspeed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12234022857279049,\n        \"min\": 0.0,\n        \"max\": 0.8507,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          0.8507,\n          0.4925\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"casual\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 0,\n        \"max\": 367,\n        \"num_unique_values\": 322,\n        \"samples\": [\n          201,\n          171\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"registered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 151,\n        \"min\": 0,\n        \"max\": 886,\n        \"num_unique_values\": 776,\n        \"samples\": [\n          342,\n          744\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cnt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 181,\n        \"min\": 1,\n        \"max\": 977,\n        \"num_unique_values\": 869,\n        \"samples\": [\n          594,\n          46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "corrected-concrete",
      "metadata": {
        "id": "corrected-concrete"
      },
      "source": [
        "#### Feature scaling\n",
        "\n",
        "Feature scaling is essential for machine learning algorithms, the range of all features should be normalized so that each feature contributes approximately proportionately to the final distance. Apply scaling on the continuous variables on the given data.\n",
        "\n",
        "Hint: `MinMaxScaler` or `StandardScaler`\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.columns[[10, 11, 12, 13, 14, 15, 16]]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-A54Hi8F_23i",
        "outputId": "39355af2-8c7b-439a-90a3-d20f8f060573"
      },
      "id": "-A54Hi8F_23i",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "id": "deadly-leisure",
      "metadata": {
        "id": "deadly-leisure",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c2f8ead-7a05-4f63-9aa5-35d140c27a7f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " MinMax Scaled DataFrame:\n",
            "           temp   atemp   hum  windspeed    casual  registered       cnt\n",
            "0      0.224490  0.2879  0.81   0.000000  0.008174    0.014673  0.015369\n",
            "1      0.204082  0.2727  0.80   0.000000  0.021798    0.036117  0.039959\n",
            "2      0.204082  0.2727  0.80   0.000000  0.013624    0.030474  0.031762\n",
            "3      0.224490  0.2879  0.75   0.000000  0.008174    0.011287  0.012295\n",
            "4      0.224490  0.2879  0.75   0.000000  0.000000    0.001129  0.000000\n",
            "...         ...     ...   ...        ...       ...         ...       ...\n",
            "17374  0.244898  0.2576  0.60   0.193018  0.029973    0.121896  0.120902\n",
            "17375  0.244898  0.2576  0.60   0.193018  0.021798    0.091422  0.090164\n",
            "17376  0.244898  0.2576  0.60   0.193018  0.019074    0.093679  0.091189\n",
            "17377  0.244898  0.2727  0.56   0.157870  0.035422    0.054176  0.061475\n",
            "17378  0.244898  0.2727  0.65   0.157870  0.032698    0.041761  0.049180\n",
            "\n",
            "[17379 rows x 7 columns]\n"
          ]
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "minmax_rental = scaler.fit_transform(df_hr[['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']])\n",
        "\n",
        "minmax_rental_df = pd.DataFrame(minmax_rental, columns=df_hr.columns[[10, 11, 12, 13, 14, 15, 16]])\n",
        "\n",
        "print(\"\\n MinMax Scaled DataFrame:\")\n",
        "print(minmax_rental_df)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# StandardScaler\n",
        "scaler = StandardScaler()\n",
        "\n",
        "std_rental = scaler.fit_transform(df_hr[['temp', 'atemp', 'hum', 'windspeed', 'casual', 'registered', 'cnt']])\n",
        "\n",
        "# Convert the scaled data back to a DataFrame\n",
        "std_rental_df = pd.DataFrame(std_rental, columns=df_hr.columns[[10, 11, 12, 13, 14, 15, 16]])\n",
        "\n",
        "print(\"\\nStandard Scaled DataFrame:\")\n",
        "print(std_rental_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X7tAK9JbBg3G",
        "outputId": "55c00c89-af8c-4932-a8b2-5a9f969978e8"
      },
      "id": "X7tAK9JbBg3G",
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Standard Scaled DataFrame:\n",
            "           temp     atemp       hum  windspeed    casual  registered       cnt\n",
            "0     -1.334648 -1.093281  0.947372  -1.553889 -0.662755   -0.930189 -0.956339\n",
            "1     -1.438516 -1.181732  0.895539  -1.553889 -0.561343   -0.804655 -0.824022\n",
            "2     -1.438516 -1.181732  0.895539  -1.553889 -0.622190   -0.837690 -0.868128\n",
            "3     -1.334648 -1.093281  0.636370  -1.553889 -0.662755   -0.950010 -0.972879\n",
            "4     -1.334648 -1.093281  0.636370  -1.553889 -0.723603   -1.009474 -1.039037\n",
            "...         ...       ...       ...        ...       ...         ...       ...\n",
            "17374 -1.230779 -1.269602 -0.141137  -0.211691 -0.500495   -0.302517 -0.388478\n",
            "17375 -1.230779 -1.269602 -0.141137  -0.211691 -0.561343   -0.480908 -0.553875\n",
            "17376 -1.230779 -1.269602 -0.141137  -0.211691 -0.581625   -0.467694 -0.548361\n",
            "17377 -1.230779 -1.181732 -0.348473  -0.456099 -0.459930   -0.698942 -0.708245\n",
            "17378 -1.230779 -1.181732  0.118032  -0.456099 -0.480213   -0.771619 -0.774403\n",
            "\n",
            "[17379 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "located-emperor",
      "metadata": {
        "id": "located-emperor"
      },
      "source": [
        "#### Apply one-hot encode on the categorical data\n",
        "\n",
        "One-hot encoding is applied on the categorical variables, which should not have a different weight or order attached to them, it is presumed that all categorical variables have equivalent \"values\". This means that you cannot simply order them from zero to the number of categories as this would imply that the earlier categories have less \"value\" than later categories.\n",
        "\n",
        "Hint: `sklearn.preprocessing.OneHotEncoder`"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_hr.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wviDxGSmG14j",
        "outputId": "83bc69ca-bd03-4cee-9d26-8aa21ba5a1ef"
      },
      "id": "wviDxGSmG14j",
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['instant', 'dteday', 'season', 'yr', 'mnth', 'hr', 'holiday', 'weekday',\n",
              "       'workingday', 'weathersit', 'temp', 'atemp', 'hum', 'windspeed',\n",
              "       'casual', 'registered', 'cnt'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "id": "soviet-stockholm",
      "metadata": {
        "id": "soviet-stockholm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c071b84c-5ba0-4722-adfc-81542c586b2e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Encoded DataFrame:\n",
            "       season_1  season_2  season_3  season_4  yr_0  yr_1  mnth_1  mnth_2  \\\n",
            "0           1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0   \n",
            "1           1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0   \n",
            "2           1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0   \n",
            "3           1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0   \n",
            "4           1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0   \n",
            "...         ...       ...       ...       ...   ...   ...     ...     ...   \n",
            "17374       1.0       0.0       0.0       0.0   0.0   1.0     0.0     0.0   \n",
            "17375       1.0       0.0       0.0       0.0   0.0   1.0     0.0     0.0   \n",
            "17376       1.0       0.0       0.0       0.0   0.0   1.0     0.0     0.0   \n",
            "17377       1.0       0.0       0.0       0.0   0.0   1.0     0.0     0.0   \n",
            "17378       1.0       0.0       0.0       0.0   0.0   1.0     0.0     0.0   \n",
            "\n",
            "       mnth_3  mnth_4  ...  weekday_3  weekday_4  weekday_5  weekday_6  \\\n",
            "0         0.0     0.0  ...        0.0        0.0        0.0        1.0   \n",
            "1         0.0     0.0  ...        0.0        0.0        0.0        1.0   \n",
            "2         0.0     0.0  ...        0.0        0.0        0.0        1.0   \n",
            "3         0.0     0.0  ...        0.0        0.0        0.0        1.0   \n",
            "4         0.0     0.0  ...        0.0        0.0        0.0        1.0   \n",
            "...       ...     ...  ...        ...        ...        ...        ...   \n",
            "17374     0.0     0.0  ...        0.0        0.0        0.0        0.0   \n",
            "17375     0.0     0.0  ...        0.0        0.0        0.0        0.0   \n",
            "17376     0.0     0.0  ...        0.0        0.0        0.0        0.0   \n",
            "17377     0.0     0.0  ...        0.0        0.0        0.0        0.0   \n",
            "17378     0.0     0.0  ...        0.0        0.0        0.0        0.0   \n",
            "\n",
            "       workingday_0  workingday_1  weathersit_1  weathersit_2  weathersit_3  \\\n",
            "0               1.0           0.0           1.0           0.0           0.0   \n",
            "1               1.0           0.0           1.0           0.0           0.0   \n",
            "2               1.0           0.0           1.0           0.0           0.0   \n",
            "3               1.0           0.0           1.0           0.0           0.0   \n",
            "4               1.0           0.0           1.0           0.0           0.0   \n",
            "...             ...           ...           ...           ...           ...   \n",
            "17374           0.0           1.0           0.0           1.0           0.0   \n",
            "17375           0.0           1.0           0.0           1.0           0.0   \n",
            "17376           0.0           1.0           1.0           0.0           0.0   \n",
            "17377           0.0           1.0           1.0           0.0           0.0   \n",
            "17378           0.0           1.0           1.0           0.0           0.0   \n",
            "\n",
            "       weathersit_4  \n",
            "0               0.0  \n",
            "1               0.0  \n",
            "2               0.0  \n",
            "3               0.0  \n",
            "4               0.0  \n",
            "...             ...  \n",
            "17374           0.0  \n",
            "17375           0.0  \n",
            "17376           0.0  \n",
            "17377           0.0  \n",
            "17378           0.0  \n",
            "\n",
            "[17379 rows x 57 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/preprocessing/_encoders.py:868: FutureWarning: `sparse` was renamed to `sparse_output` in version 1.2 and will be removed in 1.4. `sparse_output` is ignored unless you leave `sparse` to its default value.\n",
            "  warnings.warn(\n"
          ]
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# OneHotEncoder\n",
        "encoder = OneHotEncoder(sparse=False)\n",
        "\n",
        "# Fit and transform the data\n",
        "encoded_data = encoder.fit_transform(df_hr[['season', 'yr', 'mnth', 'hr', 'holiday', 'weekday', 'workingday', 'weathersit']])\n",
        "\n",
        "# Get the feature names for the encoded columns\n",
        "feature_names = encoder.get_feature_names_out(df_hr.columns[[2,3,4,5,6,7,8,9]])\n",
        "\n",
        "# Convert the encoded data back to a DataFrame\n",
        "encoded_df = pd.DataFrame(encoded_data, columns=feature_names)\n",
        "\n",
        "print(\"\\nEncoded DataFrame:\")\n",
        "print(encoded_df)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "straight-teens",
      "metadata": {
        "id": "straight-teens"
      },
      "source": [
        "#### Specify features and targets after applying scaling and one-hot encoding"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "id": "civic-private",
      "metadata": {
        "id": "civic-private",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 256
        },
        "outputId": "0d14f987-a792-4e6a-c52b-5b18542e6f76"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   season_1  season_2  season_3  season_4  yr_0  yr_1  mnth_1  mnth_2  mnth_3  \\\n",
              "0       1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0     0.0   \n",
              "1       1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0     0.0   \n",
              "2       1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0     0.0   \n",
              "3       1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0     0.0   \n",
              "4       1.0       0.0       0.0       0.0   1.0   0.0     1.0     0.0     0.0   \n",
              "\n",
              "   mnth_4  ...  workingday_1  weathersit_1  weathersit_2  weathersit_3  \\\n",
              "0     0.0  ...           0.0           1.0           0.0           0.0   \n",
              "1     0.0  ...           0.0           1.0           0.0           0.0   \n",
              "2     0.0  ...           0.0           1.0           0.0           0.0   \n",
              "3     0.0  ...           0.0           1.0           0.0           0.0   \n",
              "4     0.0  ...           0.0           1.0           0.0           0.0   \n",
              "\n",
              "   weathersit_4      temp   atemp   hum  windspeed       cnt  \n",
              "0           0.0  0.224490  0.2879  0.81        0.0  0.015369  \n",
              "1           0.0  0.204082  0.2727  0.80        0.0  0.039959  \n",
              "2           0.0  0.204082  0.2727  0.80        0.0  0.031762  \n",
              "3           0.0  0.224490  0.2879  0.75        0.0  0.012295  \n",
              "4           0.0  0.224490  0.2879  0.75        0.0  0.000000  \n",
              "\n",
              "[5 rows x 62 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ce81b7b9-d22b-4cc3-8683-a404337c489d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>season_1</th>\n",
              "      <th>season_2</th>\n",
              "      <th>season_3</th>\n",
              "      <th>season_4</th>\n",
              "      <th>yr_0</th>\n",
              "      <th>yr_1</th>\n",
              "      <th>mnth_1</th>\n",
              "      <th>mnth_2</th>\n",
              "      <th>mnth_3</th>\n",
              "      <th>mnth_4</th>\n",
              "      <th>...</th>\n",
              "      <th>workingday_1</th>\n",
              "      <th>weathersit_1</th>\n",
              "      <th>weathersit_2</th>\n",
              "      <th>weathersit_3</th>\n",
              "      <th>weathersit_4</th>\n",
              "      <th>temp</th>\n",
              "      <th>atemp</th>\n",
              "      <th>hum</th>\n",
              "      <th>windspeed</th>\n",
              "      <th>cnt</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.224490</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.81</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.015369</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.204082</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.039959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.204082</td>\n",
              "      <td>0.2727</td>\n",
              "      <td>0.80</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.031762</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.224490</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.012295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.224490</td>\n",
              "      <td>0.2879</td>\n",
              "      <td>0.75</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 62 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ce81b7b9-d22b-4cc3-8683-a404337c489d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ce81b7b9-d22b-4cc3-8683-a404337c489d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ce81b7b9-d22b-4cc3-8683-a404337c489d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e615f183-192d-4a5e-b0b6-05f4ec1becf5\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e615f183-192d-4a5e-b0b6-05f4ec1becf5')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e615f183-192d-4a5e-b0b6-05f4ec1becf5 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "concat_df"
            }
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "concat_df = pd.concat([encoded_df, minmax_rental_df[['temp', 'atemp', 'hum', 'windspeed', 'cnt']]], axis=1)\n",
        "concat_df.head(5)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "apparent-restoration",
      "metadata": {
        "id": "apparent-restoration"
      },
      "source": [
        "### Implement the linear regression by finding the coefficients using below approaches (2 points)\n",
        "\n",
        "* Find the coefficients using normal equation\n",
        "\n",
        "* (Optional) Implement batch gradient descent\n",
        "\n",
        "* (Optional) SGD Regressor from sklearn"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "involved-shame",
      "metadata": {
        "id": "involved-shame"
      },
      "source": [
        "#### Select the features and target and split the dataset\n",
        "\n",
        "As there are 3 target variables, choose the count (`cnt`) variable."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "excess-interview",
      "metadata": {
        "id": "excess-interview"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "bA2i6mvbf5yZ",
      "metadata": {
        "id": "bA2i6mvbf5yZ"
      },
      "source": [
        "#### Implementation using Normal Equation\n",
        "\n",
        "$\\theta = (X^T X)^{-1} . (X^T Y)$\n",
        "\n",
        "$θ$ is the hypothesis parameter that defines the coefficients\n",
        "\n",
        "$X$ is the input feature value of each instance\n",
        "\n",
        "$Y$ is Output value of each instance\n",
        "\n",
        "For performing Linear Regression Using the Normal Equation refer [here](https://cdn.iisc.talentsprint.com/CDS/Assignments/Module2/M2_SNB_MiniProject_1_LinearRegression_Regularization_Performing%20Linear%20Regression%20using%20Normal%20equation.pdf).\n",
        "\n",
        "To solve the normal equation compute least-squares solution by using `scipy.linalg`\n",
        "\n",
        "Hint: [scipy.linalg.lstsq](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.lstsq.html)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "concat_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JxFrKAVjTvJX",
        "outputId": "d2160c06-81b9-4a86-dc93-4c955343ca55"
      },
      "id": "JxFrKAVjTvJX",
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['season_1', 'season_2', 'season_3', 'season_4', 'yr_0', 'yr_1',\n",
              "       'mnth_1', 'mnth_2', 'mnth_3', 'mnth_4', 'mnth_5', 'mnth_6', 'mnth_7',\n",
              "       'mnth_8', 'mnth_9', 'mnth_10', 'mnth_11', 'mnth_12', 'hr_0', 'hr_1',\n",
              "       'hr_2', 'hr_3', 'hr_4', 'hr_5', 'hr_6', 'hr_7', 'hr_8', 'hr_9', 'hr_10',\n",
              "       'hr_11', 'hr_12', 'hr_13', 'hr_14', 'hr_15', 'hr_16', 'hr_17', 'hr_18',\n",
              "       'hr_19', 'hr_20', 'hr_21', 'hr_22', 'hr_23', 'holiday_0', 'holiday_1',\n",
              "       'weekday_0', 'weekday_1', 'weekday_2', 'weekday_3', 'weekday_4',\n",
              "       'weekday_5', 'weekday_6', 'workingday_0', 'workingday_1',\n",
              "       'weathersit_1', 'weathersit_2', 'weathersit_3', 'weathersit_4', 'temp',\n",
              "       'atemp', 'hum', 'windspeed', 'cnt'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "id": "66vjMjeHUTGO",
      "metadata": {
        "id": "66vjMjeHUTGO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7631017f-45d1-43e7-f900-e1b5593cbfb9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1.        , 0.        , 0.        , ..., 0.2879    , 0.81      ,\n",
              "        0.01536885],\n",
              "       [1.        , 0.        , 0.        , ..., 0.2727    , 0.8       ,\n",
              "        0.03995902],\n",
              "       [1.        , 0.        , 0.        , ..., 0.2727    , 0.8       ,\n",
              "        0.0317623 ],\n",
              "       ...,\n",
              "       [1.        , 0.        , 0.        , ..., 0.2576    , 0.6       ,\n",
              "        0.09118852],\n",
              "       [1.        , 0.        , 0.        , ..., 0.2727    , 0.56      ,\n",
              "        0.06147541],\n",
              "       [1.        , 0.        , 0.        , ..., 0.2727    , 0.65      ,\n",
              "        0.04918033]])"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "# YOUR CODE HERE\n",
        "# drop cols like windspeed, holiday, workingday as they have very low correlation\n",
        "X = concat_df.drop(['windspeed', 'holiday_0', 'holiday_1','workingday_0', 'workingday_1'], axis=1).to_numpy()\n",
        "X"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y = concat_df['cnt'].to_numpy()\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kPaGvcDyVetm",
        "outputId": "e070f5ef-2675-4596-d248-0c3cee2265fe"
      },
      "id": "kPaGvcDyVetm",
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.01536885, 0.03995902, 0.0317623 , ..., 0.09118852, 0.06147541,\n",
              "       0.04918033])"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.linalg import lstsq"
      ],
      "metadata": {
        "id": "I47WZc3KVxZ9"
      },
      "id": "I47WZc3KVxZ9",
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "x, residuals, rank, s = lstsq(X, y)"
      ],
      "metadata": {
        "id": "QDIQ4-qdVtEZ"
      },
      "id": "QDIQ4-qdVtEZ",
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Solution vector x:\")\n",
        "print(x)\n",
        "\n",
        "print(\"\\nResiduals:\")\n",
        "print(residuals)\n",
        "\n",
        "print(\"\\nRank of matrix A:\")\n",
        "print(rank)\n",
        "\n",
        "print(\"\\nSingular values of A:\")\n",
        "print(s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tRGpRDyGV15R",
        "outputId": "eff73620-8dd6-4c7e-f598-5c67ee70a9a2"
      },
      "id": "tRGpRDyGV15R",
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution vector x:\n",
            "[-4.75949109e-02 -4.75949109e-02 -4.75949109e-02 -4.75949109e-02\n",
            "  3.14073955e-02  3.14073955e-02  5.30783156e-02  5.30783156e-02\n",
            "  5.30783156e-02  5.30783156e-02  5.30783156e-02  5.30783156e-02\n",
            "  5.30783156e-02  5.30783156e-02  5.30783156e-02  5.30783156e-02\n",
            "  5.30783156e-02  5.30783156e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -1.89339914e-02 -1.89339914e-02\n",
            " -1.89339914e-02 -1.89339914e-02 -5.96269154e-02 -5.96269154e-02\n",
            " -5.96269154e-02 -5.96269154e-02 -5.96269154e-02 -5.96269154e-02\n",
            " -5.96269154e-02  4.16701066e-02  4.16701066e-02  4.16701066e-02\n",
            "  4.16701066e-02 -1.38777878e-17  1.38777878e-17 -4.16333634e-17\n",
            "  1.00000000e+00]\n",
            "\n",
            "Residuals:\n",
            "[]\n",
            "\n",
            "Rank of matrix A:\n",
            "55\n",
            "\n",
            "Singular values of A:\n",
            "[2.06667380e+02 9.34974165e+01 8.26417332e+01 7.77283970e+01\n",
            " 7.51858052e+01 7.31208769e+01 5.01744391e+01 5.00841670e+01\n",
            " 4.99775301e+01 4.98244520e+01 4.97640505e+01 4.95644850e+01\n",
            " 4.40585304e+01 3.91583464e+01 3.84512035e+01 3.83797320e+01\n",
            " 3.82299099e+01 3.81241268e+01 3.80123770e+01 3.76305439e+01\n",
            " 3.71331828e+01 3.47589053e+01 2.83959451e+01 2.70160845e+01\n",
            " 2.70025937e+01 2.69999250e+01 2.69988205e+01 2.69850579e+01\n",
            " 2.69814862e+01 2.69814798e+01 2.69812873e+01 2.69785335e+01\n",
            " 2.69718545e+01 2.69647049e+01 2.69630349e+01 2.69629173e+01\n",
            " 2.69548485e+01 2.69360044e+01 2.69183861e+01 2.68448908e+01\n",
            " 2.68236297e+01 2.67498691e+01 2.65088532e+01 2.63985227e+01\n",
            " 1.84634386e+01 1.54040603e+01 1.44734397e+01 1.29436968e+01\n",
            " 1.12599279e+01 9.64276315e+00 2.52501013e+00 1.93213865e+00\n",
            " 8.23786229e-13 1.40141803e-13 9.21787751e-14 3.92412068e-14\n",
            " 3.58139809e-14]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "id": "JfHHTPUl6joI",
      "metadata": {
        "id": "JfHHTPUl6joI"
      },
      "source": [
        "#### (Optional) Implementing Linear regression using batch gradient descent\n",
        "\n",
        "Initialize the random coefficients and optimize the coefficients in the iterative process by calculating cost and finding the gradient.\n",
        "\n",
        "Hint: [gradient descent](https://cdn.iisc.talentsprint.com/CDS/Assignments/Module2/M2_SNB_MiniProject_1_LinearRegression_Regularization_Multivariate%20Linear%20Regression.pdf)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "vQAmuH2FmXWu",
      "metadata": {
        "id": "vQAmuH2FmXWu"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "PmZJdg33NlvA",
      "metadata": {
        "id": "PmZJdg33NlvA"
      },
      "source": [
        "#### (Optional) SGD Regressor\n",
        "\n",
        "Scikit-learn API provides the SGDRegressor class to implement SGD method for regression problems. The SGD regressor applies regularized linear model with SGD learning to build an estimator. A regularizer is a penalty (L1, L2, or Elastic Net) added to the loss function to shrink the model parameters.\n",
        "\n",
        "* Import SGDRegressor from sklearn and fit the data\n",
        "\n",
        "* Predict the test data and find the error\n",
        "\n",
        "Hint: [SGDRegressor](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.SGDRegressor.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fU1-w4XRNlLA",
      "metadata": {
        "id": "fU1-w4XRNlLA"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "legal-engagement",
      "metadata": {
        "id": "legal-engagement"
      },
      "source": [
        "### Linear regression using sklearn (3 points)\n",
        "\n",
        "Implement the linear regression model using sklearn\n",
        "\n",
        "* Import Linear Regression and fit the train data\n",
        "\n",
        "* Predict the test data and find the error\n",
        "\n",
        "Hint: [LinearRegression](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "complicated-reserve",
      "metadata": {
        "id": "complicated-reserve"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "quality-morgan",
      "metadata": {
        "id": "quality-morgan"
      },
      "source": [
        "#### Calculate the $R^2$ (coefficient of determination) of the actual and predicted data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "important-jacket",
      "metadata": {
        "id": "important-jacket"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "infinite-victim",
      "metadata": {
        "id": "infinite-victim"
      },
      "source": [
        "#### Summarize the importance of features\n",
        "\n",
        "Prediction is the weighted sum of the input values e.g. linear regression. Regularization, such as ridge regression and the elastic net, find a set of coefficients to use in the weighted sum to make a prediction. These coefficients can be used directly as a crude type of feature importance score.\n",
        "This assumes that the input variables have the same scale or have been scaled prior to fitting a model.\n",
        "\n",
        "Use the coefficients obtained through the sklearn Linear Regression implementation and create a bar chart of the coefficients."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "affected-walker",
      "metadata": {
        "id": "affected-walker"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "convinced-snowboard",
      "metadata": {
        "id": "convinced-snowboard"
      },
      "source": [
        "### Regularization methods (2 points)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "twenty-italic",
      "metadata": {
        "id": "twenty-italic"
      },
      "source": [
        "#### Apply Lasso regression\n",
        "\n",
        "* Apply Lasso regression with different alpha values given below and find the best alpha that gives the least error.\n",
        "* Calculate the metrics for the actual and predicted\n",
        "\n",
        "Hint: [Lasso](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Lasso.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "psychological-blake",
      "metadata": {
        "id": "psychological-blake"
      },
      "outputs": [],
      "source": [
        "# setting up alpha\n",
        "alpha = [0.0001, 0.001,0.01, 0.1, 1, 10, 100]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "existing-sigma",
      "metadata": {
        "id": "existing-sigma"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "figured-effectiveness",
      "metadata": {
        "id": "figured-effectiveness"
      },
      "source": [
        "#### Apply Ridge regression\n",
        "\n",
        "* Apply Ridge regression with different alpha values given and find the best alpha that gives the least error.\n",
        "* Calculate the metrics for the actual and predicted\n",
        "\n",
        "Hint: [Ridge](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "curious-initial",
      "metadata": {
        "id": "curious-initial"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "exposed-bottom",
      "metadata": {
        "id": "exposed-bottom"
      },
      "source": [
        "#### Apply Elasticnet regression\n",
        "\n",
        "* Apply Elasticnet regression with different alpha values given and find the best alpha that gives the least error.\n",
        "* Calculate the metrics for the actual and predicted\n",
        "\n",
        "Hint: [ElasticNet](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "shared-belief",
      "metadata": {
        "id": "shared-belief"
      },
      "outputs": [],
      "source": [
        "# YOUR CODE HERE"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "B6bc_VBGEG7C",
      "metadata": {
        "id": "B6bc_VBGEG7C"
      },
      "source": [
        "### Determine if there is a reduction in error if two target variables are considered\n",
        "\n",
        "Consider (`Casual, Registered`) as target and find the error by implementing Linear Regression model from sklearn"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "i5l5ZviEMy-o",
      "metadata": {
        "id": "i5l5ZviEMy-o"
      },
      "source": [
        "### Report Analysis\n",
        "\n",
        "* Describe your interpretation of the methods that are used to implement linear regression covered in this mini project.\n",
        "* Comment on performance of the algorithms/methods used.\n",
        "* Comment about the nature of the data and fitment of linear regression for this data.\n",
        "* Can you perform a non linear curve fitting using linear regression? If yes, How?\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}